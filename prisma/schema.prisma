generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//NOTE :1. id's are to be kept BigInt in all the models to avoid mismatch when joining tables.
//2. Follow PascalCase for the name of the models and camelCase for the fields of the models.

//user can be customer or agent
//this role will be used in express.js to give some permissions
enum UserRole {
  Customer
  TravelAgent
}

model User {
  id               BigInt         @id @default(autoincrement())
  username         String         @unique
  password         String //has to be stored as hash using bcrypt
  email            String?        @unique //email is not necessary for sign up
  mobileNumber     String         @unique
  state            String
  country          String
  sentMessages     Message[]      @relation("sender")
  receivedMessages Message[]      @relation("receiver")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  role             UserRole
  tours            OfferedTour[] //users with role TravelAgent will be able to offer tours.
  reviews          Review[]
  searchHistory    SearchHistory?

  @@index([id, username, email]) //indexing is done for faster lookups in the table when the size of the table grows.
}

//for now only text messages are available. Multimedia messages will be covered in the future.
model Message {
  id         BigInt   @id @default(autoincrement())
  text       String
  sender     User     @relation("sender", fields: [senderId], references: [id])
  senderId   BigInt
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  receiverId BigInt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([id, senderId, receiverId])
}

model OfferedTour {
  id            BigInt   @id @default(autoincrement())
  places        Place[]
  //many to many relation between places and offeredTours
  //since one tour can have multiple places and one place
  //can be part of multiple tours
  minimumPeople Int
  price         Decimal
  startDate     DateTime
  endDate       DateTime
  facilities    String[] //different facilities to be stored as different strings
  agent         User     @relation(fields: [agentId], references: [id])
  agentId       BigInt
}

model Place {
  id       BigInt        @id @default(autoincrement())
  name     String
  location String //url of location
  tours    OfferedTour[]
  photos   String[] //array of urls to be rendered
  reviews  Review[]
  rating   Decimal
}

model Review {
  id      BigInt   @id @default(autoincrement())
  star    Int
  text    String
  photos  String[]
  Place   Place?   @relation(fields: [placeId], references: [id]) //review can be of place
  placeId BigInt?
  agent   User     @relation(fields: [agentId], references: [id]) //review can be of agent
  agentId BigInt
}

model SearchHistory {
  id     BigInt   @id @default(autoincrement())
  search String[]
  user   User     @relation(fields: [userId], references: [id])
  userId BigInt   @unique
}

model PreviousToursDetails {
  id         BigInt  @id @default(autoincrement())
  place      String
  noOfPeople Int
  price      Decimal
}
